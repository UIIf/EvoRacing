import pygame as pg
import numpy as np

arrs = [
	np.array([
				[-0.1329827,4.404275, -6.815446,3.988426,4.6273,1.818975,4.252209,1.609234,0.005898952,2.150174,2.920929,3.720461],
				[0.8561317,0.197083, -0.7120581,6.456986, -2.197042, -0.603035,2.497445,7.151623,4.734875,4.06412, -3.234887, -2.922631],
				[-3.958646,3.497719, -3.197341,4.346681,4.295621,3.491562, -4.547326,1.279029,1.697703, -3.198954, -2.765487, -3.175212],
				[1.853156, -1.64266, -4.601935,3.770432, -1.672544,3.123578,2.69236,2.907579, -1.610477,0.4246645,4.920573, -5.284607],
				[-4.853483,1.102521,4.253148,5.0435,5.356474, -1.871725, -1.399774, -4.799452,0.6311945, -5.162671, -3.835995, -7.698612],
				[-3.115251,0.3386168,2.831359, -1.983423,4.992097,6.166839, -3.494966,1.656687,0.6714106, -2.652868, -0.6466346,1.666451],
				[1.746514, -0.1386218, -3.479116, -2.21469, -0.01902533, -1.455209, -1.377344, -4.06539, -6.994969,1.635144, -0.2145786, -2.466998],
				[5.544037,0.052423, -2.986142,4.324027,0.8700266,2.795064, -1.840599, -3.348644, -2.442453, -5.455477, -1.19952,4.858699],
				[-0.5900054, -5.792753,0.4766243,1.795134,2.146349,2.671013, -3.211443,0.9994931, -1.646128, -4.594489,0.8007021, -7.310102],
				[0.961103, -2.095133,4.515164, -4.304649, -0.6470075, -5.689452,2.519289,1.273806, -1.488603,1.430327, -0.1224544,4.531832],
				[0.9922837,0.5299759, -1.517346, -2.856814, -4.331982,3.026178, -2.974477, -0.4799094,3.410099, -0.4434822,3.787704,0.01375151]
			]),
	np.array([
				[-1.516392, -1.145825],
				[3.765092,2.08116],
				[-1.572513,2.154246],
				[4.019179, -3.609372],
				[-3.095942,2.703595],
				[-3.445451, -1.044094],
				[-0.8920943,1.49833],
				[6.168189, -3.013964],
				[2.781012,2.952446],
				[5.781819,3.403664],
				[-3.924691,4.081927],
				[2.60592, -2.066675],
				[-0.05935705,0.9637833]
			])
]

pg.init()

height = 720
width = 1080
caption = "pygame"

win = pg.display.set_mode((width, height))
pg.display.set_caption(caption)

run = True
leave = False

def draw_neurons(array, screen):
	rect_size = 20
	offset_x = (width- rect_size*(len(array) + 1))/(len(array)+2)
	offset_y = (height - rect_size*array[0].shape[0])/(array[0].shape[0]+1)
	print(array[0].shape[1])
	arr_centers = [[]]
	for i in range(array[0].shape[0]):
		pg.draw.rect(screen, [0,0,255], pg.Rect((offset_x, offset_y*(i + 1) + rect_size * i) , (rect_size,rect_size)))
		arr_centers[0] +=[(offset_x + rect_size/2, offset_y*(i + 1) + rect_size * i + rect_size/2)]
	
	for i in range(len(array)):
		arr_centers += [[]]
		offset_y = (height - rect_size*array[i].shape[1])/(array[i].shape[1]+1)
		for j in range(array[i].shape[1]):
			pg.draw.rect(screen, [0,0,255], pg.Rect((offset_x*(i + 2) + i*rect_size, offset_y*(j + 1) + rect_size * j) , (rect_size,rect_size)))
			arr_centers[i + 1] +=[(offset_x*(i + 2) + i*rect_size + rect_size/2, offset_y*(j + 1) + rect_size * j + rect_size/2)]
	
	for r in arr_centers:
		for l in r:
			print(int(l[0]), int(l[1]))
			pg.draw.circle(screen, [255,0,255], (int(l[0]), int(l[1])), 4)

draw_neurons(arrs,win)		
pg.display.update()

while run:

    # Events

    for event in pg.event.get():
        if event.type == pg.QUIT:
            run = False
            leave = True
            break
    if leave:
        break




pg.quit()